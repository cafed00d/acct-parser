/*
 *  Copyright 2015, Peter Johnson
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *  use this file except in compliance with the License. You may obtain a copy
 *  of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  License for the specific language governing permissions and limitations
 *  under the License.
 */
package org.cafed00d.account;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Understands the layout for a transaction in the CSV file generated by the
 * bank. Provides getters that can be used to extract the information for the
 * transaction.
 */
public class Transaction {

  /**
   * Logger for this class.
   */
  private static final Logger log = LogManager.getLogger(Transaction.class);

  /**
   * The regex used to match an transaction line in the bank's CSV file. The
   * line syntax is:
   * 
   * <pre>
   * mm/dd/yy,"&lt;description&gt;","&lt;amount&gt;","&lt;balance&gt;"
   * </pre>
   * 
   * The description is free form text. The amount and balance are numerics with
   * a possible negative sign and two decimal places.
   */
  // private static final String TXN_REGEX =
  // "(\\d{2})/(\\d{2})/(\\d{2}),\"([^\"]*)\",\"([^\"]*)\",\"[^\"]*\"";
  private static final String TXN_REGEX = "(\\d{2})/(\\d{2})/(\\d{4}),\"([^\"]*)\",\"([^\"]*)\".*";

  /**
   * The compiled regex.
   */
  private static final Pattern pattern = Pattern.compile(TXN_REGEX);

  /**
   * Use the {@link #parse(String)} method to get a Transaction object.
   */
  private Transaction() {
  }

  /**
   * Creates a transaction object given an entry from the CSV file.
   * 
   * @param line
   *          A line from the CSV file.
   * @return The interpreted data for the input line. Will be null if the line
   *         does not contain the expected data.
   */
  public static Transaction parse(String line) {
    Transaction result = null;
    Matcher m = pattern.matcher(line);
    if (m.matches()) {
      result = new Transaction();
      try {
        result.month = Integer.parseInt(m.group(1));
        result.day = Integer.parseInt(m.group(2));
        result.year = Integer.parseInt(m.group(3));
        result.description = m.group(4);
        result.amount = Math.abs(Float.parseFloat(m.group(5)));
      } catch (Exception e) {
        log.error("Problem parsing line " + line, e);
      }
      log.debug("Recognized the transaction: " + result.toString("\n"));
    }
    return result;
  }

  /**
   * The description entry for the transaction. Used to identify the account.
   */
  private String description;

  /**
   * @see #description
   * @return See {@link #description}
   */
  public String getDescription() {
    return description;
  }

  /**
   * The year in which the transaction took place.
   */
  private int year;

  /**
   * @see #year
   * @return See {@link #year}
   */
  public int getYear() {
    return year;
  }

  /**
   * The month in which the transaction took place.
   */
  private int month;

  /**
   * @see #month
   * @return See {@link #getMonth()}
   */
  public int getMonth() {
    return month;
  }

  /**
   * The day of the month in which the transaction took place.
   */
  private int day;

  /**
   * @see #day
   * @return See {@link #day}
   */
  public int getDay() {
    return day;
  }

  /**
   * The amount of the transaction. Debits will be negative and credits positive
   * in the original CSV file. The transaction amount, however will always be
   * positive, mainly because we are interested only in debits and we want our
   * graphs in R to show positive value not negative.
   */
  private float amount;

  /**
   * @see #amount
   * @return See {@link #amount}
   */
  public float getAmount() {
    return amount;
  }

  /**
   * Returns a string contains all of the data for this object, one field value
   * at a time.
   * 
   * @param prefix
   *          A prefix to insert before each field; usually a line feed.
   * @return The generated string.
   */
  private String toString(String prefix) {
    StringBuilder builder = new StringBuilder(200);
    builder.append(prefix).append("  year: ").append(year);
    builder.append(prefix).append(" month: ").append(month);
    builder.append(prefix).append("   day: ").append(day);
    builder.append(prefix).append("amount: ").append(amount);
    builder.append(prefix).append(" descr: ").append(description);
    return builder.toString();
  }
}
